//     This code was generated by a Reinforced.Typings tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.

import { IPublishedProjectDto } from '../../Core/Dtos/Project/IPublishedProjectDto';
import { IProjectDto } from '../../Core/Dtos/Project/IProjectDto';
import { IProjectWithTiersDto } from '../../Core/Dtos/Project/IProjectWithTiersDto';
import { ICreateProjectCommand } from '../../Domain/Features/ProjectFeatures/Commands/ICreateProjectCommand';
import { ISupportProjectCommand } from '../../Domain/Features/ProjectFeatures/Commands/ISupportProjectCommand';
import { IPublishProjectCommand } from '../../Domain/Features/ProjectFeatures/Commands/IPublishProjectCommand';
import { IUpdateProjectCommand } from '../../Domain/Features/ProjectFeatures/Commands/IUpdateProjectCommand';

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { environment } from '../../../../environments/environment';
import { Observable } from 'rxjs';
@Injectable({ providedIn: 'root' })
 export class ProjectsApiService
{
	constructor (private http: HttpClient) { } 
	getAllPublished() : Observable<IPublishedProjectDto[]>
	{
		const options = {
			headers: { accept: 'application/json' }};
		return this.http.request<any>('GET',`${environment.baseUrl}/api/Projects/get-published`, options)
	}
	getAll() : Observable<IProjectDto[]>
	{
		const options = {
			headers: { accept: 'application/json' }};
		return this.http.request<any>('GET',`${environment.baseUrl}/api/Projects/get-all`, options)
	}
	getAllByUser() : Observable<IProjectDto[]>
	{
		const options = {
			headers: { accept: 'application/json' }};
		return this.http.request<any>('GET',`${environment.baseUrl}/api/Projects/get-created`, options)
	}
	getById(id: string) : Observable<IProjectWithTiersDto>
	{
		const options = {
			params: { id: encodeURIComponent(id) },
			headers: { accept: 'application/json' }};
		return this.http.request<any>('GET',`${environment.baseUrl}/api/Projects/${id}`, options)
	}
	create(command: ICreateProjectCommand) : Observable<void>
	{
		const options = {
			body: command,
			headers: { accept: 'application/json' }};
		return this.http.request<any>('POST',`${environment.baseUrl}/api/Projects/`, options)
	}
	supportProject(command: ISupportProjectCommand) : Observable<void>
	{
		const options = {
			body: command,
			headers: { accept: 'application/json' }};
		return this.http.request<any>('POST',`${environment.baseUrl}/api/Projects/support`, options)
	}
	publishProject(command: IPublishProjectCommand) : Observable<void>
	{
		const options = {
			body: command,
			headers: { accept: 'application/json' }};
		return this.http.request<any>('PATCH',`${environment.baseUrl}/api/Projects/publish`, options)
	}
	delete(id: string) : Observable<void>
	{
		const options = {
			body: null,
			headers: { accept: 'application/json' }};
		return this.http.request<any>('DELETE',`${environment.baseUrl}/api/Projects/${id}`, options)
	}
	update(id: string) : Observable<void>
	{
		const options = {
			body: null,
			headers: { accept: 'application/json' }};
		return this.http.request<any>('PUT',`${environment.baseUrl}/api/Projects/${id}`, options)
	}
}
