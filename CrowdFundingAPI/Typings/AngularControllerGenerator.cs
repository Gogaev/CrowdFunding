using Reinforced.Typings;
using Reinforced.Typings.Ast;
using Reinforced.Typings.Ast.Dependency;
using Reinforced.Typings.Ast.TypeNames;
using Reinforced.Typings.Generators;

namespace CrowdFundingAPI.Typings;

public class AngularControllerGenerator : ClassCodeGenerator
{
    public override RtClass? GenerateNode(Type element, RtClass? result, TypeResolver resolver)
    {
        // First of all, we fetch original AST node that is being generated by default
        result = base.GenerateNode(element, result, resolver);
        if (result == null) return null;

        result.Name = new RtSimpleTypeName(
            result.Name.TypeName.Replace(
                "Controller",
                "ApiService",
                StringComparison.OrdinalIgnoreCase));

        // Here we are declaring constructor for our angular service using HttpClient as parameter
        RtConstructor constructor = new RtConstructor();
        constructor.Arguments.Add(new RtArgument
        {
            Type = new RtSimpleTypeName("HttpClient"),
            Identifier = new RtIdentifier("private http"),
        });

        result.Members.Insert(0, constructor);
        result.Decorators.Add(new RtDecorator("Injectable({ providedIn: 'root' })\n"));

        // add imports
        RtImport importInjectable = new RtImport
        {
            From = "@angular/core",
            Target = "{ Injectable }",
        };

        RtImport importHttp = new RtImport
        {
            From = "@angular/common/http",
            Target = "{ HttpClient }",
        };

        RtImport environment = new RtImport
        {
            From = "../../../../environments/environment",
            Target = "{ environment }",
        };

        RtImport observable = new RtImport
        {
            From = "rxjs",
            Target = "{ Observable }",
        };

        this.Context.Location.CurrentNamespace.CompilationUnits.Add(importInjectable);
        this.Context.Location.CurrentNamespace.CompilationUnits.Add(importHttp);
        this.Context.Location.CurrentNamespace.CompilationUnits.Add(environment);
        this.Context.Location.CurrentNamespace.CompilationUnits.Add(observable);

        return result;
    }
}